var base = {};base.util = {};base.util.js = {};base.util.js.namespace = function(space, parent){var spaces = space.split('.');if(!spaces.length || parent == null){return null;}var base = parent;var start = base;for(var i in spaces){base[spaces[i]] = base[spaces[i]] || {};base = base[spaces[i]];}return start;};
base.util.js.namespace('util.js', base);base.util.js.extend = function(base, child){child.prototype = Object.create(base.prototype); child.prototype.constructor = child;};
base.util.js.namespace('mvc', base);base.mvc.MethodNotImplementedException = function(classname, method){this.name = 'MethodNotImplementedException';this.message = 'The method '+method+' was not implemented in class '+classname;};base.util.js.extend(Error, base.mvc.MethodNotImplementedException);
base.util.js.namespace('mvc', base);base.mvc.Model = function(classname){if(!classname){this._classname = 'Model';}else{this._classname = classname;}this._callback = null;};base.mvc.Model.prototype.send = function(url, callback){if(typeof url !== 'string'){return;}var req = new XMLHttpRequest();req.open('POST', url, true);req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=UTF-8');this._callback = callback;var self = this;req.onreadystatechange = function(){if(req.readyState === 4 && req.status === 200){self._receive(req.responseText);}};req.send(this._classname+'='+JSON.stringify(this.getData()));};base.mvc.Model.prototype.receive = function(data){throw new base.mvc.MethodNotImplementedException('Model', 'receive');};base.mvc.Model.prototype.getData = function(){throw new base.mvc.MethodNotImplementedException('Model', 'getData');};base.mvc.Model.prototype._receive = function(data){try{var obj = JSON.parse(data);if(obj.class != this._classname){return;}}catch(e){throw new base.mvc.DataNoJsonException(data);}this.receive(obj.data);if(this._callback){this._callback(obj.data);}};base.mvc.DataNoJsonException = function(data){this.name = 'DataNoJsonException';this.message = 'The data could not be parsed to an JSON object! Data was: '+data;};base.util.js.extend(Error, base.mvc.DataNoJsonException);base.mvc.DataNoJsonException = function(data){this.name = 'DataNoJsonException';this.message = 'The data could not be parsed to an JSON object! Data was: '+data;};base.util.js.extend(Error, base.mvc.DataNoJsonException);
